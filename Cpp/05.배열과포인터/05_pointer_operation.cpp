/*
	# 포인터 연산
	- 포인터는 값을 증가시키거나 감소시키는 등의 제한된 연산만을 할 수 있다.

	1. 포인터끼리의 덧셈, 곱셈, 나눗셈은 아무런 의미가 없다.
	2. 포인터끼리의 뺄셈은 두 포인터 사이의 상대적 거리를 나타낸다.
	3. 포인터에 정수를 더하거나 뺄 수는 있지만, 실수와의 연산은 허용하지 않는다.
	4. 포인터끼리 대입하거나 비교할 수 있다.

	# 타입별 포인터 연산
	- 포인터 연산에서 포인터 연산 후 각각의 포인터가 가리키고 있는 주소는 포인터의 타입에 따라 달라진다.
	- 그 증가 폭은 포인터가 가리키는 변수의 타입의 크기와 같다.

	# 포인터와 배열의 관계
	- 포인터와 배열은 긴밀한 관계를 맺고 있으며, 어떤 부분에서는 서로를 대체할 수도 있다.
	- 배열의 이름은 그 값을 변경할 수 없는 상수라는 점을 제외하면 포인터와 같다.
	- 배열의 이름을 포인터처럼 사용할 수 있을 뿐만 아니라, 포인터를 배열의 이름처럼 사용할 수도 있다.
	- 즉, 배열의 이름이 주소로 해석되며, 해당 배열의 첫 번째 요소의 주소와 같게 된다.
*/
#include <iostream>
using namespace std;

int main(void) {

	int arr[3] = { 10, 20, 30 };	// 배열 선언
	int* ptr_arr = arr;				// 포인터에 배열의 이름 대입

	cout << "배열의 이름을 이용하여 배열 요소에 접근 : " << arr[0] << ", " << arr[1] << ", " << arr[2] << endl;
	cout << "     포인터를 이용하여 배열 요소에 접근 : " << ptr_arr[0] << ", " << ptr_arr[1] << ", " << ptr_arr[2] << endl;

	cout << "배열의 이름을 이용한 배열의 크기 계산 : " << sizeof(arr) << endl;
	cout << "     포인터를 이용한 배열의 크기 계산 : " << sizeof(ptr_arr) << endl;
	
	/*
		# 배열의 포인터 연산
		- 배열의 이름으로 포인터 연산을 진행하여 배열의 요소에 접근

		arr[n] == *(arr + n)
	*/
	cout << "          배열의 이름을 이용하여 배열 요소에 접근 : " << arr[0] << ", " << arr[1] << ", " << arr[2] << endl;
	cout << "배열의 이름으로 포인터 연산을 해 배열 요소에 접근 : " << *(arr + 0) << ", " << *(arr + 1) << ", " << * (arr + 2);

	return 0;
}